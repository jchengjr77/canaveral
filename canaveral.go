// Package main contains API for Canaveral CLI.
// See README.md for more documentation
package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/user"

	"github.com/urfave/cli/v2"
)

// usrHome will be changed to the current user's home dir
var usrHome = ""

// confDir contains all configuration files to be generated by canaveral
const confDir = "/canaveral/config/"
const wsFName = "cnavrlws"

// check takes in an error and verifies if it is nil.
// If the error is not nil, it will terminate the program.
func check(e error) {
	if e != nil {
		panic(e)
	}
}

// fileExists checks if a file exists and is not a directory before we
// try using it to prevent further errors.
func fileExists(filename string) bool {
	info, err := os.Stat(filename)
	if os.IsNotExist(err) {
		return false
	}
	return !info.IsDir()
}

// dirExists checks if a dir exists and is not a file before we
// try using it to prevent further errors.
func dirExists(dirname string) bool {
	info, err := os.Stat(dirname)
	if os.IsNotExist(err) {
		return false
	}
	return info.IsDir()
}

// showWorkspaceHandler checks the confDir for the workspace file.
// If such a file exists, it reads its contents and navigates to that path.
// Otherwise, it notifies the user that there is no canaveral workspace set.
func showWorkspaceHandler() error {
	if !fileExists(usrHome + confDir + wsFName) {
		fmt.Println("No workspace set.")
		fmt.Printf("Can't find config file in %s\n", usrHome+confDir+wsFName)
		fmt.Println("Please specify a canaveral workspace.")
		fmt.Println("(For help, use 'canaveral --help')")
		return nil
	}
	ws, err := ioutil.ReadFile(usrHome + confDir + wsFName)
	check(err)
	fmt.Printf("\nYour canaveral path: %s\n", ws)
	fmt.Printf("\nCurrent canaveral projects:\n")
	files, err := ioutil.ReadDir(string(ws))
	check(err)
	for _, file := range files {
		fmt.Println(file.Name())
	}
	return nil
}

// setWorkspaceHandler takes in a new path and writes to the confDir.
// If the workspace file already exists, it overwrites it with the new path.
// Otherwise, it creates the workspace file and writes the path in.
func setWorkspaceHandler(newWorkspace string) error {
	err := os.MkdirAll(usrHome+confDir, os.ModePerm)
	check(err)
	f, err := os.Create(usrHome + confDir + wsFName) // If file exists, truncates
	check(err)
	defer f.Close() // Close the file at the return of this function
	f.WriteString(newWorkspace)
	fmt.Printf("Set canaveral workspace to: %s\n", newWorkspace)
	return nil
}

// ? Incomplete functionality
// addProjectHandler takes in a project name and initializes a new project.
// If the project name is empty, it prompts the user to enter a name.
// Vanilla behavior includes generating a directory labeled the project name.
// Initializes all boilerplate code for specified project type.
// ! Project Types are not enabled yet
func addProjectHandler(projName string) error {
	if projName == "" {
		fmt.Println("Please provide a project name.")
		fmt.Println("(For more info, 'canaveral --help')")
	} else {
		fmt.Printf("Adding Project: %s\n", projName)
	}
	return nil
}

func remProjectHandler(projName string) error {
	if projName == "" {
		fmt.Println("Cannot remove an unspecified project. Please provide the project name.")
	} else {
		fmt.Printf("Removing Project: %s\n", projName)
	}
	return nil
}

func main() {

	// quiet flag
	var qFlag = false

	// Set home directory path of current user
	usr, err := user.Current()
	check(err)
	usrHome = usr.HomeDir

	app := &cli.App{
		Name:  "canaveral",
		Usage: "Launch your new project effortlessly.",
		Flags: []cli.Flag{
			&cli.BoolFlag{
				Name:        "quiet",
				Aliases:     []string{"q"},
				Usage:       "Quiet Mode. Silences all output when active",
				Destination: &qFlag,
			},
		},
		Commands: []*cli.Command{
			{
				Name:        "create",
				Aliases:     []string{"c", "add"},
				Description: "Creates a new project with name of your choice.",
				Usage:       "Create New Project",
				Action: func(c *cli.Context) error {
					projName := c.Args().Get(0)
					addProjectHandler(projName)
					return nil
				},
			},
			{
				Name:    "remove",
				Aliases: []string{"r", "del", "rem", "delete"},
				Description: `Deletes target project from workspace.
				You must provide the name of the project you want to delete.`,
				Usage: "Delete Existing Project",
				Action: func(c *cli.Context) error {
					projName := c.Args().Get(0)
					remProjectHandler(projName)
					return nil
				},
			},
			{
				Name:    "space",
				Aliases: []string{"path", "setpath"},
				Description: `Sets path to your personal canaveral workspace.
					This path should be one that you can remember.
					It will become the home for all your projects.`,
				Usage: "Set canaveral workspace path.",
				Action: func(c *cli.Context) error {
					newWorkspace := c.Args().Get(0)
					setWorkspaceHandler(newWorkspace)
					return nil
				},
			},
		},
		Action: func(c *cli.Context) error {
			showWorkspaceHandler()
			return nil
		},
	}

	err = app.Run(os.Args)
	if err != nil {
		log.Fatal(err)
	}
}
